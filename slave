#if defined(ARDUINO) && ARDUINO >= 100

  #include "Arduino.h"
  #include "SoftwareSerial.h"
  SoftwareSerial port(12,13);
#else // Arduino 0022 - use modified NewSoftSerial
  #include "WProgram.h"
  #include "NewSoftSerial.h"
  NewSoftSerial port(12,13);
#endif

#include "EasyVR.h"

 
int pos = 0;    // variable to store the servo position
#define leftSensor   0
#define nearleftsensor  1
#define leftCenterSensor   2
#define rightcenterSensor    3
#define nearrightsensor  4
#define rightSensor    5

int countx=0;
#define srightmotor  5
#define brightmotor 6
#define sleftmotor  9
#define bleftmotor 10
#define LED 2
EasyVR easyvr(port);

//Groups and Commands
enum Groups
{
  GROUP_0  = 0,
  GROUP_1  = 1,
};

enum Group0 
{
  G0_START = 0,
};

enum Group1 
{
  G1_FORWARD = 0,
  G1_BACKWARD = 1,
  G1_LEFT = 2,
  G1_RIGHT = 3,
  G1_REPRESENT_YR_SELF = 4,
  G1_TRACE_THE_LINE = 5,
  G1_TRACK_1 = 6,
  G1_TRACK_2 = 7,
  G1_TRACK_3 = 8,
};


EasyVRBridge bridge;

int8_t group, idx;
void setup()
{

    pinMode(LED, OUTPUT);

  
  pinMode(leftSensor, INPUT);
  pinMode(nearleftsensor, INPUT);
  pinMode(leftCenterSensor, INPUT);
  pinMode(rightcenterSensor, INPUT);
  pinMode(nearrightsensor, INPUT);
  pinMode(rightSensor, INPUT); 
  pinMode(srightmotor, OUTPUT);
  pinMode(brightmotor, OUTPUT);
  pinMode(sleftmotor, OUTPUT);
  pinMode(bleftmotor, OUTPUT);
  // bridge mode?
  if (bridge.check())
  {
    cli();
    bridge.loop(0, 1, 12, 13);
  }
  // run normally
  Serial.begin(9600);
  port.begin(9600);

  if (!easyvr.detect())
  {
    Serial.println("EasyVR not detected!");
    for (;;);
  }

  easyvr.setPinOutput(EasyVR::IO1, LOW);
  Serial.println("EasyVR detected!");
  easyvr.setTimeout(5);
  easyvr.setLanguage(0);

  group = EasyVR::TRIGGER; //<-- start group (customize)
}

void action();

void loop()
{
  easyvr.setPinOutput(EasyVR::IO1, HIGH); // LED on (listening)

  Serial.print("Say a command in Group ");
  Serial.println(group);
  easyvr.recognizeCommand(group);

  do
  {
    if (countx==1){
       digitalWrite(LED , HIGH);
           if (analogRead(leftCenterSensor)>600 && analogRead(rightcenterSensor)>600 && analogRead(nearrightsensor)>600 && analogRead(nearleftsensor)>600 && analogRead(leftSensor)>600
    &&analogRead(rightSensor)>600){
    analogWrite(srightmotor,0);
    analogWrite(brightmotor, 0);
    analogWrite(sleftmotor, 0); // analogRead values go from 0 to 1023,
    analogWrite(bleftmotor, 0);
  
}
    if (analogRead(rightSensor)<600 && analogRead(leftSensor)<600  )
    {
          if ( analogRead(nearleftsensor)>600){

      analogWrite(srightmotor,255);
    analogWrite(brightmotor, 0);
    analogWrite(sleftmotor, 220); // analogRead values go from 0 to 1023,
    analogWrite(bleftmotor, 0);  
    }
           if (analogRead(leftCenterSensor)>600 && analogRead(nearleftsensor)>600){
    analogWrite(srightmotor,255);
    analogWrite(brightmotor, 0);
    analogWrite(sleftmotor, 220); // analogRead values go from 0 to 1023,
    analogWrite(bleftmotor, 0);
    }
               if (analogRead(leftCenterSensor)>600 && analogRead(nearleftsensor)>600&&analogRead(rightcenterSensor)>600){
    analogWrite(srightmotor,255);
    analogWrite(brightmotor, 0);
    analogWrite(sleftmotor, 220); // analogRead values go from 0 to 1023,
    analogWrite(bleftmotor, 0);
    }
           if (analogRead(leftCenterSensor)>600){
    analogWrite(srightmotor,255);
    analogWrite(brightmotor, 0);
    analogWrite(sleftmotor, 170); // analogRead values go from 0 to 1023,
    analogWrite(bleftmotor, 0);
    }
        if (analogRead(leftCenterSensor)>600 && analogRead(rightcenterSensor)>600){
    analogWrite(srightmotor,255);
    analogWrite(brightmotor, 0);
    analogWrite(sleftmotor, 235); // analogRead values go from 0 to 1023,
    analogWrite(bleftmotor, 0);
    }
    
    
            if ( analogRead(rightcenterSensor)>600){
    analogWrite(srightmotor,170);
    analogWrite(brightmotor, 0);
    analogWrite(sleftmotor, 255); // analogRead values go from 0 to 1023,
    analogWrite(bleftmotor, 0);
    }
            if (analogRead(nearrightsensor)>600 && analogRead(rightcenterSensor)>600){
    analogWrite(srightmotor,220);
    analogWrite(brightmotor, 0);
    analogWrite(sleftmotor, 255); // analogRead values go from 0 to 1023,
    analogWrite(bleftmotor, 0);
    }
            if ( analogRead(nearrightsensor)>600){

      analogWrite(srightmotor,220);
    analogWrite(brightmotor, 0);
    analogWrite(sleftmotor, 255); // analogRead values go from 0 to 1023,
    analogWrite(bleftmotor, 0);
      
    }
                if (analogRead(nearrightsensor)>600 && analogRead(rightcenterSensor)>600&&analogRead(leftCenterSensor)>600){
    analogWrite(srightmotor,220);
    analogWrite(brightmotor, 0);
    analogWrite(sleftmotor, 255); // analogRead values go from 0 to 1023,
    analogWrite(bleftmotor, 0);
    }
            if (analogRead(leftCenterSensor)<600 && analogRead(rightcenterSensor)<600 && analogRead(nearrightsensor)<600 && analogRead(nearleftsensor)<600
       && analogRead(rightSensor)<600 && analogRead(leftSensor)<600){
    analogWrite(srightmotor,255);
    analogWrite(brightmotor, 0);
    analogWrite(sleftmotor, 235); // analogRead values go from 0 to 1023,
    analogWrite(bleftmotor, 0);
    
    }
    }
    else{
 
      turn();
    } 

       Serial.println( "rightsensor :");
           Serial.println( analogRead(rightSensor));
           Serial.println( "rightcenterSensor :");
           Serial.println( analogRead(rightcenterSensor));
           Serial.println( "nearrightsensor :");
           Serial.println( analogRead(nearrightsensor));
           Serial.println( "leftCenterSensor :");
           Serial.println(analogRead(leftCenterSensor));
           Serial.println( "nearleftsensor :");
           Serial.println( analogRead(nearleftsensor));
           Serial.println( "leftsensor :");
           Serial.println( analogRead(leftSensor));
    }
    // can do some processing while waiting for a spoken command
  }
  while (!easyvr.hasFinished());
  
  easyvr.setPinOutput(EasyVR::IO1, LOW); // LED off
if(countx==0){
  idx = easyvr.getWord();}
  if (idx >= 0)
  {
    // built-in trigger (ROBOT)
    // group = GROUP_X; <-- jump to another group X
    return;
  }
  idx = easyvr.getCommand();
  if (idx >= 0)
  {
    // print debug message
    uint8_t train = 0;
    char name[32];
    Serial.print("Command: ");
    Serial.print(idx);
    if (easyvr.dumpCommand(group, idx, name, train))
    {
      Serial.print(" = ");
      Serial.println(name);
    }
    else
      Serial.println();
    easyvr.playSound(0, EasyVR::VOL_FULL);
    // perform some action
    action();
  }
  else // errors or timeout
  {
    if (easyvr.isTimeout())
      Serial.println("Timed out, try again...");
    int16_t err = easyvr.getError();
    if (err >= 0)
    {
      Serial.print("Error ");
      Serial.println(err, HEX);
    }
  }
}

void action()
{
    switch (group)
    {
    case GROUP_0:
      switch (idx)
      {
      case G0_START:
              easyvr.playSound(0, EasyVR::VOL_FULL);
        group = GROUP_1;
        // write your action code here
        // group = GROUP_X; <-- or jump to another group X for composite commands
        break;
      }
      break;
    case GROUP_1:
      switch (idx)
      {
      case G1_FORWARD:
        easyvr.playSound(0, EasyVR::VOL_FULL);
        easyvr.playSound(6, EasyVR::VOL_FULL);
        analogWrite(srightmotor, 0); 
        analogWrite(brightmotor, 255); 
        analogWrite(sleftmotor, 0); 
        analogWrite(bleftmotor, 255);
        delay(3000);
        analogWrite(srightmotor, 0); 
        analogWrite(brightmotor, 0); 
        analogWrite(sleftmotor, 0); 
        analogWrite(bleftmotor, 0);
        // write your action code here
        // group = GROUP_X; <-- or jump to another group X for composite commands
        break;
      case G1_BACKWARD:    
        easyvr.playSound(0, EasyVR::VOL_FULL);
        easyvr.playSound(6, EasyVR::VOL_FULL);
        analogWrite(srightmotor, 255); 
        analogWrite(brightmotor, 0); 
        analogWrite(sleftmotor, 255); 
        analogWrite(bleftmotor, 0);
        delay(3000);
        analogWrite(srightmotor, 0); 
        analogWrite(brightmotor, 0); 
        analogWrite(sleftmotor, 0); 
        analogWrite(bleftmotor, 0);
        // write your action code here
        // group = GROUP_X; <-- or jump to another group X for composite commands
        break;
      case G1_LEFT:
        easyvr.playSound(0, EasyVR::VOL_FULL);
        easyvr.playSound(6, EasyVR::VOL_FULL);
        analogWrite(srightmotor, 255); 
        analogWrite(brightmotor, 0); 
        analogWrite(sleftmotor, 0); 
        analogWrite(bleftmotor, 255);
        delay(3000);
        analogWrite(srightmotor, 0); 
        analogWrite(brightmotor, 0); 
        analogWrite(sleftmotor, 0); 
        analogWrite(bleftmotor, 0);
        // write your action code here
        // group = GROUP_X; <-- or jump to another group X for composite commands
        break;
        case G1_RIGHT:
        easyvr.playSound(0, EasyVR::VOL_FULL);
        easyvr.playSound(6, EasyVR::VOL_FULL);
        analogWrite(srightmotor, 0); 
        analogWrite(brightmotor, 255); 
        analogWrite(sleftmotor, 255); 
        analogWrite(bleftmotor, 0);
        delay(3000);
        analogWrite(srightmotor, 0); 
        analogWrite(brightmotor, 0); 
        analogWrite(sleftmotor, 0); 
        analogWrite(bleftmotor, 0);
        break;
      case G1_REPRESENT_YR_SELF:
        // write your action code here
         easyvr.playSound(7, EasyVR::VOL_FULL);
         easyvr.playSound(5, EasyVR::VOL_FULL);
         easyvr.playSound(1, EasyVR::VOL_FULL);
         easyvr.playSound(3, EasyVR::VOL_FULL);
         easyvr.playSound(2, EasyVR::VOL_FULL);
         easyvr.playSound(4, EasyVR::VOL_FULL);
        // group = GROUP_X; <-- or jump to another group X for composite commands
        break;
      case G1_TRACE_THE_LINE:
      easyvr.playSound(0, EasyVR::VOL_FULL);
      easyvr.playSound(11, EasyVR::VOL_FULL);
     countx=1; 
     loop();
        // group = GROUP_X; <-- or jump to another group X for composite commands
        break;  
      case G1_TRACK_1:
      easyvr.playSound(0, EasyVR::VOL_FULL);
      easyvr.playSound(11, EasyVR::VOL_FULL);
    analogWrite(srightmotor,255);
    analogWrite(brightmotor, 0);
    analogWrite(sleftmotor, 0); // analogRead values go from 0 to 1023,
    analogWrite(bleftmotor, 255);
    delay(2500);
        analogWrite(srightmotor,255);
    analogWrite(brightmotor, 0);
    analogWrite(sleftmotor, 255); // analogRead values go from 0 to 1023,
    analogWrite(bleftmotor, 0);
    delay(3000);
        analogWrite(srightmotor,0);
    analogWrite(brightmotor, 255);
    analogWrite(sleftmotor, 255); // analogRead values go from 0 to 1023,
    analogWrite(bleftmotor, 0);
    delay(2550);
         countx=1; 
     loop();
        // write your action code here
        // group = GROUP_X; <-- or jump to another group X for composite commands
        break;
      case G1_TRACK_2:
       easyvr.playSound(0, EasyVR::VOL_FULL);
      easyvr.playSound(11, EasyVR::VOL_FULL);
        // write your action code here
        // group = GROUP_X; <-- or jump to another group X for composite commands
          countx=1; 
     loop();
        break;
      case G1_TRACK_3:
    easyvr.playSound(0, EasyVR::VOL_FULL);
    easyvr.playSound(11, EasyVR::VOL_FULL);
    analogWrite(srightmotor,0);
    analogWrite(brightmotor, 255);
    analogWrite(sleftmotor, 255); // analogRead values go from 0 to 1023,
    analogWrite(bleftmotor, 0);
    delay(2550);  
    analogWrite(srightmotor,255);
    analogWrite(brightmotor, 0);
    analogWrite(sleftmotor, 255); // analogRead values go from 0 to 1023,
    analogWrite(bleftmotor, 0);
    delay(3000);
    analogWrite(srightmotor,255);
    analogWrite(brightmotor, 0);
    analogWrite(sleftmotor, 0); // analogRead values go from 0 to 1023,
    analogWrite(bleftmotor, 255);
    delay(2550);
           countx=1; 
     loop();
        // write your action code here
        // group = GROUP_X; <-- or jump to another group X for composite commands
        break;
      }
      break;
    }
}
 void turn(){
     digitalWrite(LED , HIGH);
               if ( analogRead(leftSensor)>600 && analogRead(rightSensor)<600){

    analogWrite(srightmotor,255);
    analogWrite(brightmotor, 0);
    analogWrite(sleftmotor, 0); // analogRead values go from 0 to 1023,
    analogWrite(bleftmotor, 255);

      
    }
        if ( analogRead(nearleftsensor)>600  && analogRead(leftSensor)>600&& analogRead(rightSensor)<600){
    analogWrite(srightmotor,255);
    analogWrite(brightmotor, 0);
    analogWrite(sleftmotor, 0); // analogRead values go from 0 to 1023,
    analogWrite(bleftmotor, 255);
        
    }
                 if (analogRead(leftCenterSensor)>600  && analogRead(nearleftsensor)>600  && analogRead(leftSensor)>600 && analogRead(rightSensor)<600){
   analogWrite(srightmotor,255);
    analogWrite(brightmotor, 0);
    analogWrite(sleftmotor, 255); // analogRead values go from 0 to 1023,
    analogWrite(bleftmotor, 0);
    delay(500); 
    analogWrite(srightmotor,255);
    analogWrite(brightmotor, 0);
    analogWrite(sleftmotor, 0); // analogRead values go from 0 to 1023,
    analogWrite(bleftmotor, 255);
        delay(2550);
      }
      
            if ( analogRead(rightSensor)>600 && analogRead(leftSensor)<600){

    analogWrite(srightmotor,0);
    analogWrite(brightmotor, 255);
    analogWrite(sleftmotor, 255); // analogRead values go from 0 to 1023,
    analogWrite(bleftmotor, 0);
     
    }
               if ( analogRead(nearrightsensor)>600  && analogRead(rightSensor)>600 && analogRead(leftSensor)<600){  
    analogWrite(srightmotor,0);
    analogWrite(brightmotor, 255);
    analogWrite(sleftmotor, 255); // analogRead values go from 0 to 1023,
    analogWrite(bleftmotor, 0);
           }
           
               if (analogRead(rightcenterSensor )>600  && analogRead(nearrightsensor)>600  && analogRead(rightSensor)>600 && analogRead(leftSensor)<600){
   analogWrite(srightmotor,255);
    analogWrite(brightmotor, 0);
    analogWrite(sleftmotor, 255); // analogRead values go from 0 to 1023,
    analogWrite(bleftmotor, 0);
    delay(500);
    analogWrite(srightmotor,0);
    analogWrite(brightmotor, 255);
    analogWrite(sleftmotor, 255); // analogRead values go from 0 to 1023,
    analogWrite(bleftmotor, 0);
    delay(2550);

             }
    if (analogRead(leftCenterSensor)>600 && analogRead(rightcenterSensor)>600 && analogRead(nearrightsensor)>600 && analogRead(nearleftsensor)>600 && analogRead(leftSensor)>600
    &&analogRead(rightSensor)>600){
    analogWrite(srightmotor,0);
    analogWrite(brightmotor, 0);
    analogWrite(sleftmotor, 0); // analogRead values go from 0 to 1023,
    analogWrite(bleftmotor, 0);
    delay(1000);
    }
    ///////////////////////////////////////////////////////////////////////////////////// wait for the letter comes from the ethernet sheild
      analogWrite(srightmotor,255);
    analogWrite(brightmotor, 0);
    analogWrite(sleftmotor, 0); // analogRead values go from 0 to 1023,
    analogWrite(bleftmotor, 255);
   delay(5000);
       analogWrite(srightmotor,0);
    analogWrite(brightmotor, 0);
    analogWrite(sleftmotor, 0); // analogRead values go from 0 to 1023,
    analogWrite(bleftmotor, 0);
    delay(1000);
    countx=0;
}
